// Code generated by swaggo/swag. DO NOT EDIT.

package uploader

import "github.com/swaggo/swag"

const docTemplateuploader = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ming Hsu",
            "email": "minghsu0107@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/uploader/download/presigned": {
            "get": {
                "description": "Get presigned url for downloading a file from S3",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "uploader"
                ],
                "summary": "Get presigned download url",
                "parameters": [
                    {
                        "type": "string",
                        "description": "base64-encoded object key",
                        "name": "okb64",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "channel authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/uploader.PresignedDownload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    }
                }
            }
        },
        "/uploader/upload/files": {
            "post": {
                "description": "Upload files to S3 bucket (deprecated; use presigned urls instead)",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "uploader"
                ],
                "summary": "Upload files (deprecated)",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "multi",
                        "description": "files to upload",
                        "name": "files[]",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "channel authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/uploader.UploadedFilesPresenter"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    }
                }
            }
        },
        "/uploader/upload/presigned": {
            "get": {
                "description": "Get presigned url for uploading a file to S3",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "uploader"
                ],
                "summary": "Get presigned upload url",
                "parameters": [
                    {
                        "type": "string",
                        "description": "file extension",
                        "name": "ext",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "channel authorization",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/uploader.PresignedUpload"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.ErrResponse": {
            "type": "object",
            "properties": {
                "msg": {
                    "type": "string"
                }
            }
        },
        "uploader.PresignedDownload": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        },
        "uploader.PresignedUpload": {
            "type": "object",
            "properties": {
                "object_key": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "uploader.UploadedFilePresenter": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "uploader.UploadedFilesPresenter": {
            "type": "object",
            "properties": {
                "uploaded_files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/uploader.UploadedFilePresenter"
                    }
                }
            }
        }
    }
}`

// SwaggerInfouploader holds exported Swagger Info so clients can modify it
var SwaggerInfouploader = &swag.Spec{
	Version:          "2.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Uploader Service Swagger API",
	Description:      "Uploader service API",
	InfoInstanceName: "uploader",
	SwaggerTemplate:  docTemplateuploader,
}

func init() {
	swag.Register(SwaggerInfouploader.InstanceName(), SwaggerInfouploader)
}
